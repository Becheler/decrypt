cmake_minimum_required(VERSION 3.12)

project(decrypt)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set_property(DIRECTORY PROPERTY EP_BASE ${CMAKE_BINARY_DIR}/subprojects)

set(STAGED_INSTALL_PREFIX ${CMAKE_BINARY_DIR}/stage)
message(STATUS "${PROJECT_NAME} staged install: ${STAGED_INSTALL_PREFIX}")

list(APPEND BOOST_COMPONENTS_REQUIRED program_options)
set(Boost_MINIMUM_REQUIRED 1.61)
add_subdirectory(external/upstream)

include(ExternalProject)
ExternalProject_Add(
  ${PROJECT_NAME}_core
  DEPENDS
    boost_external
    sqlite3_external
    gdal_external
  SOURCE_DIR
    ${CMAKE_CURRENT_LIST_DIR}/src
  CMAKE_ARGS
    -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}
    -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}
    -DCMAKE_CXX_EXTENSIONS=${CMAKE_CXX_EXTENSIONS}
    -DCMAKE_CXX_STANDARD_REQUIRED=${CMAKE_CXX_STANDARD_REQUIRED}
  CMAKE_CACHE_ARGS
    -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}
    -DCMAKE_INCLUDE_PATH:PATH=${BOOST_INCLUDEDIR}
    -DCMAKE_LIBRARY_PATH:PATH=${BOOST_LIBRARYDIR}
    -DCMAKE_INCLUDE_PATH:PATH=${SQLite3_INCLUDE_DIRS}
    -DCMAKE_LIBRARY_PATH:PATH=${STAGED_INSTALL_PREFIX}
    -DCMAKE_INCLUDE_PATH:PATH=${GDAL_INCLUDE_DIR}
    -DCMAKE_LIBRARY_PATH:PATH=${GDAL_LIBRARY}
  BUILD_ALWAYS
    1
  INSTALL_COMMAND
    ""
  )

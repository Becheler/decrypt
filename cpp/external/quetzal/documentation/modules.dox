/**
  * \defgroup geography geography
  * \brief Template classes for building spatially explicit representations of spatio-temporal quantities
  *
  * ## Overview
  * These classes are designed to handle the geographical aspects of the spatially explicit simulations.
  *
  * ![geography module overview](/resources/schema_geography_module.png)
  *
  * ## GDAL core
  * Key features of [GDAL](http://www.gdal.org/) API are encapsulated in a mordern C++ wrapper class,
  * the gdalcpp::Dataset class, allowing to read data from raster files and perform basic operations.
  * Geolocalization syntax is pixel-oriented (data are accessed by row and columns indices), which can
  * can be confusing when manipulating spatial landscapes along with dispersal kernels (where distances need to be computed) and
  * spatial genetic samples (where sampling coordinates are typically defined in latitude/longitude).
  *
  * ## Geography-friendly interfaces
  * For better harmonization with other features, GeographicCoordinates objects are used
  * in classes interfaces to represent
  * latitude and longitude in decimal degrees and to compute great-circle distances in kilometers between
  * two points.
  *
  * ## Representing environmental quantities as functions of space and time.
  *
  * The EnvironmentalQuantity class adds a level of abstraction to gdalcpp::Dataset, in order to
  * represent a discrete function of space and time based on geographic coordinates. It allows to
  * retrieve the coordinates of the cells centroids for which the value is defined
  * at all times. This set can be used to represent the demic structure and to perform
  * secured mathematical composition of ecological functions
  * (for example using the expressive module).
  *
  * For example, the DiscreteLandscape class template represents an arbitrary number of ecological quantities
  * on a discrete geographic space. It allows to retrieve lightweight function-objects representing
  * the underlying ecological quantities (candidates for function composition using expressive module).
  * Similarly to the EnvironmentalQuantity class template, it allows to retrieve
  * a geographic definition space suited to modeling: the coordinates
  * of the cells centroids for which a value is defined at all times for all quantities.
  *
  *
  *
  *
  * \defgroup expressive expressive
  * \brief Compile-time mathematical expressions optimization.
  *
  * ## Motivations
  * *************************************
  *
  * ### Better express user-defined mathematical models
  *
  * The impact of environmental factors or spatial structure on demographic processes can be assessed by
  * setting up mathematical models linking environmental and demographic quantities
  * together. Obviously, the details of the functions used depend on the biological context and the
  * modeler intuition, so there is __no do-it-all function__ that could be implemented
  * once and used in all possible contexts.
  *
  * Inevitably, later or sooner the user would have to build its own modeling functions:
  * all we can do is to propose __concise way to express them.__
  *
  * ###Â Favor code modularity.
  *
  * In the context of [ABC](https://en.wikipedia.org/wiki/Approximate_Bayesian_computation)
  * it is expected that several of the function parameters change their values at runtime.
  * One should prefer to pass around a whole expression with internally changing parameters
  * values rather than passing multiples parameters everywhere in the code to propagate
  * their new state (what would greatly hinder maintainability, especially
  * since ABC approaches tend to favor models comparison thus code flexibility).
  *
  * Expressive features allow to __encapsulate models details in an efficient way.__
  *
  * ### Do it with minimal runtime cost
  *
  * To tackle both this multiplicity and the computational cost imposed by
  * [ABC](https://en.wikipedia.org/wiki/Approximate_Bayesian_computation) approaches,
  * we integrate [expressive](https://github.com/ambre-m/expressive), a library that
  * allows to compose mathematical expressions at compile time. Compile-time expressions
  * manipulation allows the compiler to apply intra-procedural optimization
  * (dead code elimination, branch prediction,
  * induction variable elimination). Finally, it allows the compiler to simplify
  * the expressions, or even deduce the final result of the function. This comes
  * along with the other known [benefits of eliminating a function call](https://en.wikipedia.org/wiki/Inline_expansion), namely:
  * * It does not require function calling overhead.
  * * It saves overhead of variables push/pop on the stack, while function calling.
  * * It saves overhead of return call from a function.
  * * It increases [locality of reference](https://en.wikipedia.org/wiki/Interprocedural_optimization).
  *
  * ## Examples of biological interests
  * *************************************
  *
  * ### Representing dispersal kernels
  *
  * Representation of a dispersal kernel density involves some kind of mathematical
  * composition. In the simple case where density is only a function of the geographic distance,
  * the details of the distance computation can be separated from the details
  * of the kernel used by composing two independently defined functions.
  *
  * The inner function \f$ g : X^2 \rightarrow R\f$ would be
  * the distance computation function between two points of the geographic space \f$X\f$,
  * and can be expressed in terms of a callable object having a
  * `distance_type operator()(coord_type x, coord_type y)` interface.
  *
  * The outer function \f$f : R \rightarrow [0,1]\f$ could be any kind of density function defined on the distance metric
  * space \f$R\f$ and taking value in \f$[0,1] \f$, and can be defined
  * in terms of a callable object having a `double operator()(distance_type d)` interface.
  *
  * Without expressive, these two types could not be composed. With expressive, it becomes trivial:
  * \code{.cpp}
  * using coord_type = int;
  * using distance_type = double;
  *
  * auto g = [](coord_type x, coord_type y){
  *     distance_type d = // ...
  *     return d;
  *  }
  *
  * auto f = [](distance_type d){
  *   // ...
  *    return proba;
  *  }
  *
  * auto kernel = quetzal::expressive::compose(f,g);
  * \endcode
  *
  * ### Representing environmental quantities as functions of space and time.
  *
  * In the framework of complex coalescence processes, a major benefit of expressive
  * is the possibility to express and compose quantities that are functions of space and time.
  *
  * The geography module, via the DiscreteLandscape class template,
  * provides lightweight function objects of space and time which are callable with GeographicCoordinates
  * and an user-defined time argument to access environmental values.
  * These little objects can be composed into more complex expressions using expressive.
  *
  * \defgroup demography demography
  * \brief Template classes for building complex demographies for further
  *        conditional coalescence simulation.
  *
  * Defines template classes for storage and retrieval of demographic quantities of
  * interest such as populations size distribution across space and time, or demographic
  * flows between demes at all times.
  *
  * These quantities are used in coalescence models for defining coalescence
  * probability or backward migration probabilities of gene copies.
  *
  *
  * \defgroup simulator simulator
  * \brief Template classes for simulating discrete-time coalescence processes
  *
  * These classes are useful for defining stochastic processes that enable coalescence
  * simulation of a sample.
  *
  *
  * \defgroup random random
  * \brief Template classes for building non-number discrete distribution and markovian transition kernels.
  *
  * These classes are usefull for building stochastic processes using simulated quantities
  * as random distribution. For example, a simulated demographic flux can be converted to a
  * markovian kernel to be used inside a spatialized coalescence algorithm as a backward
  * transition kernel.

  * \defgroup coalescence coalescence
  * \brief Template algorithms for operating coalescence operations on data sequences.
  *
  * Sub-module                              | Description
  * ----------------------------------------| -------------
  * \ref coal_algorithms "Algorithms"       | Template algorithms for operating coalescence operations on data sequences.
  * \ref coal_containers "Containers"       | Template containers for coalescent reconstruction involving non-trivial data manipulation.
  * \ref coal_spectrum "Occupancy spectrum" | Random experience of simultaneous multiple collisions.
  * \ref coal_policies "Policies"           | Components for policy-based designed algorithms or models.
  *
  * - Define your own concept of coalescence with \ref coal_algorithms : template
  * algorithms let you free to define the data implementation that will
  * be the most suitable to your special case study.
  *
  * - Use \ref coal_containers for efficient manipulation of customized genealogies
  * when confronting non-trivial cases for which no simple data representation holds
  * (for example when studying space-and-time distribution of coalescence events).
  *
  * - Use \ref coal_spectrum to boost your simulations ! Under some hypothesis,
  * coalescence with simultaneous multiple collisions can lead to study what we
  * called the occupancy spectrum (loosely speaking a coalescence configuration).
  * Occupancy spectrum is used as an interface in algorithms: its simulation is highly
  * customizable and involves trade-offs between speed and memory consumption.
  * Choose the most appropriate set of behaviors !
  *
  * - Some algorithms make use of policies for customization. Feel free to re-use them
  * if you need their interface in your own implementation of coalescence models.
  * @{
  *
  * \defgroup coal_algorithms Algorithms
  * \brief Template algorithms for operating coalescence operations on data sequences.
  *
  * \defgroup coal_containers Containers
  * \brief Template containers for coalescent reconstruction involving non-trivial data manipulation.
  *
  * \defgroup coal_policies Policies
  * \brief Policies with common interface, made to be used when designing coalescence algorithms or models.
  *
  * \defgroup coal_spectrum Occupancy Spectrum
  * \brief Occupancy spectrum simulation for coalescence with simultaneous multiple collisions.
  *
  * @}
  *
  * \defgroup simulator simulator
  * \brief Template classes to simulate coalescence in complex frameworks
  *
  * \defgroup abc abc
  * \brief Template classes for embedding simulation model objects into an Approximate Bayesian Computation framework.
  *
  * Defines template classes to embed simulation code into an Approximate Bayesian Computation framework framework.
  * For now, only basics are implemented (Rubin rejection sample,
  * Pritchard rejection sampler, generation of the reference table). Nevertheless,
  * this allows to perform an open-ended number of important inference tasks,
  * as the user can for example inject almost any kind of distance or summary statistics
  * in the analysis of the reference table.
  *
  *
  * ## C++ concept : GenerativeModel
  *
  * The abc module relies heavily on the C++ concept of GenerativeModel, which defines the set
  * of constraints that a simulation model object must have to interact with the
  * abc module.
  *
  * The type `D` satisfies GenerativeModel if
  *
  * * `D` satisfies [CopyConstructible](http://en.cppreference.com/w/cpp/concept/CopyConstructible)
  * * `D` satisfies [CopyAssignable](http://en.cppreference.com/w/cpp/concept/CopyAssignable)
  *
  * Given
  *
  * * `T`, the type named by `M::return_type`
  * * `P`, the type named by `M::param_type`, which:
  *   * satisfies [CopyConstructible](http://en.cppreference.com/w/cpp/concept/CopyConstructible)
  *   * satisfies [CopyAssignable](http://en.cppreference.com/w/cpp/concept/CopyAssignable)
  *   * satisfies [EqualityComparable](http://en.cppreference.com/w/cpp/concept/EqualityComparable)
  *   * has a constructor taking identical arguments as each of the constructors of
  *    `D` that take arguments corresponding to the model parameters.
  *   * has a member function with the identical name, type, and semantics,
  *    as every member function of `D` that returns a parameter of the model
  *   * declares a member typedef `using distribution_type = D`;
  * * `d`, a value of type `D`
  * * `x`, a (possibly `const`) value of type `D`
  * * `p`, a (possibly `const`) value of type `P`
  * * `g`,  a lvalue of a type satisfying the STL [UniformRandomBitGenerator](http://en.cppreference.com/w/cpp/concept/UniformRandomBitGenerator) concept
  *
  * The following expressions must be valid and have their specified effects :
  *
  * Expression          | Type | Notes
  * --------------------|------|-------------------------------------|
  * `D::result_type`    | `T`    | the type of the simulated data      |
  * `D::param_type`     | `T`    |                                     |
  * `D()`               |      | creates a distribution indistinguishable from any other default-constructed `D` |
  * `D(p)`              |      | creates a distribution indistinguishable from `D` constructed directly from the values used to construct `p` |
  * `x.param()`         | `P`    | Returns `p` such that `D(p).param() == p`   |
  * `d.param(p)`        | `void` | Postcondition: `d.param() == p`             |
  * `d(g)`              | `T`    | The sequence of data returned by successive invocations of this call with the same `g` are randomly distributed according to the distribution parametrized by `d.param()` |
  * `d(g,p)`            | `T`    | The sequence of data returned by successive invocations of this call with the same `g` are randomly distributed according to the distribution parametrized by `p` |
  *
  * \remark All types satisfying the requirements of the STL [RandomNumberDistribution](http://en.cppreference.com/w/cpp/concept/RandomNumberDistribution) satisfy quetzal GenerativeModel concept.
  */
